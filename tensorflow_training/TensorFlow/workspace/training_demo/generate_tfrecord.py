""" Sample TensorFlow XML-to-TFRecord converter

usage: generate_tfrecord.py [-h] [-x XML_DIR] [-l LABELS_PATH] [-o OUTPUT_PATH] [-i IMAGE_DIR] [-c CSV_PATH]

optional arguments:
  -h, --help            show this help message and exit
  -x XML_DIR, --xml_dir XML_DIR
                        Path to the folder where the input .xml files are stored.
  -l LABELS_PATH, --labels_path LABELS_PATH
                        Path to the labels (.pbtxt) file.
  -o OUTPUT_PATH, --output_path OUTPUT_PATH
                        Path of output TFRecord (.record) file.
  -i IMAGE_DIR, --image_dir IMAGE_DIR
                        Path to the folder where the input image files are stored. Defaults to the same directory as XML_DIR.
  -c CSV_PATH, --csv_path CSV_PATH
                        Path of output .csv file. If none provided, then no file will be written.
"""

import os
import glob
import pandas as pd
import io
import xml.etree.ElementTree as ET
import argparse
import numpy as np

os.environ['TF_CPP_MIN_LOG_LEVEL'] = '2'    # Suppress TensorFlow logging (1)
import tensorflow.compat.v1 as tf
from PIL import Image
from object_detection.utils import dataset_util, label_map_util
from collections import namedtuple

import functools
from object_detection import inputs
from object_detection.core import preprocessor
from object_detection.core import standard_fields as fields
from object_detection.utils import config_util
from object_detection.utils import test_case

# Initiate argument parser
parser = argparse.ArgumentParser(
    description="Sample TensorFlow XML-to-TFRecord converter")
parser.add_argument("-x",
                    "--xml_dir",
                    help="Path to the folder where the input .xml files are stored.",
                    type=str)
parser.add_argument("-l",
                    "--labels_path",
                    help="Path to the labels (.pbtxt) file.", type=str)
parser.add_argument("-o",
                    "--output_path",
                    help="Path of output TFRecord (.record) file.", type=str)
parser.add_argument("-i",
                    "--image_dir",
                    help="Path to the folder where the input image files are stored. "
                         "Defaults to the same directory as XML_DIR.",
                    type=str, default=None)
parser.add_argument("-c",
                    "--csv_path",
                    help="Path of output .csv file. If none provided, then no file will be "
                         "written.",
                    type=str, default=None)

args = parser.parse_args()

if args.image_dir is None:
    args.image_dir = args.xml_dir

label_map = label_map_util.load_labelmap(args.labels_path)
label_map_dict = label_map_util.get_label_map_dict(label_map)

newWidth = 320
newHeight = 320
# ---------------------------------------------- IMAGE PREPROCESSING ---------------------------------------------------------
data_augmentation_options = [
    (preprocessor.random_horizontal_flip, { #boh sembra non funzionare
    }),
    #(preprocessor.resize_image, {
    #    'new_height': 320,
    #    'new_width': 320
    #}),
    (preprocessor.resize_to_range, {
        'min_dimension': newWidth,
        'max_dimension': newHeight,
        'pad_to_max_dimension': False #looks like this option does not adjust the boxes positions! to add padding we use the options down here
    }),
    (preprocessor.random_pad_image, {
        'min_image_size': (newWidth,newHeight),
        'max_image_size': (newWidth,newHeight),
        'center_pad': True
    }),
    #(preprocessor.random_crop_image, {
    #    #'min_object_covered': 0.0,
    #    'min_object_covered': 1.0,
    #    #'aspect_ratio_range': (0.75,3.0),
    #    #'area_range': (0.75, 1.0),
    #    'aspect_ratio_range': (1,1),
    #    'area_range': (1, 1),
    #    'overlap_thresh': 0.0
    #})
]
#---------------------------------------------------------------------------------------------------------------------------------

def xml_to_csv(path):
    """Iterates through all .xml files (generated by labelImg) in a given directory and combines
    them in a single Pandas dataframe.

    Parameters:
    ----------
    path : str
        The path containing the .xml files
    Returns
    -------
    Pandas DataFrame
        The produced dataframe
    """

    xml_list = []
    for xml_file in glob.glob(path + '/*.xml'):
        tree = ET.parse(xml_file)
        root = tree.getroot()
        filename = root.find('filename').text
        width = int(root.find('size').find('width').text)
        height = int(root.find('size').find('height').text)
        for member in root.findall('object'):
            bndbox = member.find('bndbox')
            value = (filename,
                     width,
                     height,
                     member.find('name').text,
                     int(bndbox.find('xmin').text),
                     int(bndbox.find('ymin').text),
                     int(bndbox.find('xmax').text),
                     int(bndbox.find('ymax').text),
                     )
            xml_list.append(value)
    column_name = ['filename', 'width', 'height',
                   'class', 'xmin', 'ymin', 'xmax', 'ymax']
    xml_df = pd.DataFrame(xml_list, columns=column_name)
    return xml_df


def class_text_to_int(row_label):
    return label_map_dict[row_label]


def split(df, group):
    data = namedtuple('data', ['filename', 'object'])
    gb = df.groupby(group)
    return [data(filename, gb.get_group(x)) for filename, x in zip(gb.groups.keys(), gb.groups)]


def create_tf_example(group, path):
    with tf.gfile.GFile(os.path.join(path, '{}'.format(group.filename)), 'rb') as fid:
        encoded_jpg = fid.read()
    encoded_jpg_io = io.BytesIO(encoded_jpg)
    image = Image.open(encoded_jpg_io)
    width, height = image.size

    filename = group.filename.encode('utf8')
    image_format = b'jpg'
    xmins = []
    xmaxs = []
    ymins = []
    ymaxs = []
    classes_text = []
    classes = []

    for index, row in group.object.iterrows():
        xmins.append(row['xmin'] / width)
        xmaxs.append(row['xmax'] / width)
        ymins.append(row['ymin'] / height)
        ymaxs.append(row['ymax'] / height)
        classes_text.append(row['class'].encode('utf8'))
        classes.append(class_text_to_int(row['class']))

    boxes = zip(ymins, xmins, ymaxs, xmaxs)
    tensor_dict = {
        fields.InputDataFields.image: tf.constant(np.array(image).astype(np.float32)/255.0),
        fields.InputDataFields.groundtruth_boxes: tf.constant(np.array(list(boxes), np.float32)),
        fields.InputDataFields.groundtruth_classes: tf.one_hot(np.array(classes)-1 , len(label_map_dict))
    }
    data_augmentation_fn = functools.partial(inputs.augment_input_data, data_augmentation_options=data_augmentation_options)
    augmented_tensor_dict = data_augmentation_fn(tensor_dict=tensor_dict)
    image=augmented_tensor_dict[fields.InputDataFields.image].numpy()*255
    boxes=augmented_tensor_dict[fields.InputDataFields.groundtruth_boxes].numpy()
    new_classes=augmented_tensor_dict[fields.InputDataFields.groundtruth_classes].numpy()

    classes = []
    classes_text = []
    for cl in new_classes:
        tmp=0
        for j in range(len(cl)):
            if cl[j]==1.0:
                tmp=j
        classes.append(tmp+1)
        for i,num in enumerate(label_map_dict.values()):
            if num==tmp+1:
                break
        classes_text.append(list(label_map_dict.keys())[i].encode('utf8'))

    tf_example = tf.train.Example(features=tf.train.Features(feature={
        'image/height': dataset_util.int64_feature(newHeight),
        'image/width': dataset_util.int64_feature(newWidth),
        'image/filename': dataset_util.bytes_feature(filename),
        'image/source_id': dataset_util.bytes_feature(filename),
        'image/encoded': dataset_util.bytes_feature(tf.io.encode_png(image.astype(np.uint8)).numpy()),
        'image/format': dataset_util.bytes_feature(image_format),
        'image/object/bbox/xmin': dataset_util.float_list_feature(boxes[...,1]),
        'image/object/bbox/xmax': dataset_util.float_list_feature(boxes[...,3]),
        'image/object/bbox/ymin': dataset_util.float_list_feature(boxes[...,0]),
        'image/object/bbox/ymax': dataset_util.float_list_feature(boxes[...,2]),
        'image/object/class/text': dataset_util.bytes_list_feature(classes_text),
        'image/object/class/label': dataset_util.int64_list_feature(classes),
    }))
    return tf_example


def main(_):

    writer = tf.python_io.TFRecordWriter(args.output_path)
    path = os.path.join(args.image_dir)
    examples = xml_to_csv(args.xml_dir)
    grouped = split(examples, 'filename')
    for group in grouped:
        tf_example = create_tf_example(group, path)
        writer.write(tf_example.SerializeToString())
    writer.close()
    print('Successfully created the TFRecord file: {}'.format(args.output_path))
    if args.csv_path is not None:
        examples.to_csv(args.csv_path, index=None)
        print('Successfully created the CSV file: {}'.format(args.csv_path))


if __name__ == '__main__':
    tf.app.run()
